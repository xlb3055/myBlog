"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[163],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},1780:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>l});var n=a(641);const h=[(0,n.Fv)('<h1 id="springboot-的常用注解-持续更新。。。" tabindex="-1"><a class="header-anchor" href="#springboot-的常用注解-持续更新。。。"><span>Springboot 的常用注解（持续更新。。。）</span></a></h1><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Controller</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 和 </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ResponseBody</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  的组合注解。每个方法的返回值都会以 JSON 或 XML 的形式直接写入 HTTP 响应体中，相当于在每个方法上都添加了 </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ResponseBody</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 注解。</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Controller</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：适用于传统的 MVC 架构，它负责处理请求并返回相应的视图。（</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController下的方法默认返回的是数据格式</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">，</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Controller注解标注的类下面的方法默认返回的就是以视图为格式</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">）</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：将请求和处理请求的控制器方法关联起来，建立映射关系。（说白了就是定义一个请求到哪的路径）</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">reponseBody</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：用于将controller的返回结果经过转化转为json格式</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">pathvariable</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：获取get请求中的参数</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：用于细化接口的请求类型</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：用于细化接口的请求类型</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringbootApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：用于标记主配置类，其中包含了</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">、</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableAutoConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">、</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ComponentScan三个注解</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：表示这是一个 Spring 配置类，它等价于 </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 注解，用于声明类作为 Spring 的配置类。</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableAutoConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：启用 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Spring</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Boot 的自动配置功能，</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Spring</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Boot 会根据添加到项目中的依赖库来自动配置应用程序，它可以帮助减少显式的配置代码，因为 </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Spring</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Boot 会自动检测和配置合适的 Bean。</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ComponentScan</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">：用于指定要扫描的包，以便 Spring 可以在这些包中查找带有 </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">、</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">、</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Repository</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 和 </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Controller</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 等注解的类。默认情况下，</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ComponentScan</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 会在包含 </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 注解的类所在的包及其子包中进行扫描。</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autoware</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 用于实现依赖注入</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">允许 Spring 自动地将匹配的 Bean 注入到类的字段、构造函数或方法中。</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">13.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">： Java 的一个注解，用于实现依赖注入，和</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autoware类似</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">，但与之不同的是他默认通过name匹配来注入Bean，如果找不到匹配的name则会退回到通过类型匹配。</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">。。。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2)],k={},t=(0,a(6262).A)(k,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,h)}]]),l=JSON.parse('{"path":"/posts/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Spring/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html","title":"Springboot 的常用注解（持续更新。。。）","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-08-11T00:00:00.000Z","category":["后端"],"tag":["Spring","后端开发技巧"],"sticky":true,"star":true,"description":"Springboot 的常用注解（持续更新。。。）","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myBlog/posts/%E6%9D%82%E7%A2%8E%E8%AE%B0%E5%BD%95/%EF%BD%9E%E5%90%8E%E7%AB%AF%E6%9D%82%E8%AE%B0/Spring/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Bin的成长博客"}],["meta",{"property":"og:title","content":"Springboot 的常用注解（持续更新。。。）"}],["meta",{"property":"og:description","content":"Springboot 的常用注解（持续更新。。。）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Bin"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"后端开发技巧"}],["meta",{"property":"article:published_time","content":"2024-08-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Springboot 的常用注解（持续更新。。。）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bin\\",\\"url\\":\\"/avator_img.jpg\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.76,"words":529},"filePathRelative":"posts/杂碎记录/～后端杂记/Spring/常用注解.md","localizedDate":"2024年8月11日","excerpt":"\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">RestController</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Controller</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> 和 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">ResponseBody</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">  的组合注解。每个方法的返回值都会以 JSON 或 XML 的形式直接写入 HTTP 响应体中，相当于在每个方法上都添加了 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">ResponseBody</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> 注解。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">2.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Controller</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：适用于传统的 MVC 架构，它负责处理请求并返回相应的视图。（</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">RestController下的方法默认返回的是数据格式</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">，</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Controller注解标注的类下面的方法默认返回的就是以视图为格式</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">3.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">RequestMapping</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：将请求和处理请求的控制器方法关联起来，建立映射关系。（说白了就是定义一个请求到哪的路径）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">reponseBody</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：用于将controller的返回结果经过转化转为json格式</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">5.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">pathvariable</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：获取get请求中的参数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">6.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">GetMapping</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：用于细化接口的请求类型</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">7.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">PostMapping</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：用于细化接口的请求类型</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">8.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">SpringbootApplication</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：用于标记主配置类，其中包含了</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">SpringBootConfiguration</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">、</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">EnableAutoConfiguration</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">、</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">ComponentScan三个注解</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">9.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">SpringBootConfiguration</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：表示这是一个 Spring 配置类，它等价于 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Configuration</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> 注解，用于声明类作为 Spring 的配置类。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">10.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">EnableAutoConfiguration</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：启用 </span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Spring</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> Boot 的自动配置功能，</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Spring</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> Boot 会根据添加到项目中的依赖库来自动配置应用程序，它可以帮助减少显式的配置代码，因为 </span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Spring</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> Boot 会自动检测和配置合适的 Bean。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">11.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">ComponentScan</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">：用于指定要扫描的包，以便 Spring 可以在这些包中查找带有 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Component</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">、</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Service</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">、</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Repository</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> 和 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Controller</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> 等注解的类。默认情况下，</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">ComponentScan</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> 会在包含 </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">SpringBootApplication</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> 注解的类所在的包及其子包中进行扫描。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">12.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Autoware</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">:</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> 用于实现依赖注入</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">允许 Spring 自动地将匹配的 Bean 注入到类的字段、构造函数或方法中。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">13.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Resource</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">： Java 的一个注解，用于实现依赖注入，和</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Autoware类似</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">，但与之不同的是他默认通过name匹配来注入Bean，如果找不到匹配的name则会退回到通过类型匹配。</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">。。。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);